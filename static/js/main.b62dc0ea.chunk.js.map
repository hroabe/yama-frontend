{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","App","position","LatLng","useState","yamalist","setYamaList","getYamaFromBackend","a","axios","create","baseURL","get","headers","Accept","then","response","values","data","catch","error","console","log","useEffect","className","MapContainer","center","zoom","TileLayer","attribution","url","map","yama","pos","split","length","lat","Number","parseFloat","lng","Popup","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VASIA,EAAcC,IAAEC,KAAK,CACrBC,QAASD,IACTE,UAAWC,MAEfJ,IAAEK,OAAOC,UAAUC,QAAQN,KAAOF,EAgEnBS,MA9Df,WACE,IACMC,EAAW,IAAIC,SAAO,SAAW,YAF1B,EAImBC,mBAAyC,IAJ5D,mBAINC,EAJM,KAIIC,EAJJ,KAOPC,EAAkB,uCAAG,sBAAAC,EAAA,sEACnBC,IAAMC,OAAO,CAACC,QAPV,4CAOyBC,IAAI,2DACvC,CACEC,QAAU,CAAEC,OAAQ,sBACnBC,MAAK,SAAUC,GAChB,IAAIC,EAA0CD,EAASE,KAAKA,KAC5DZ,EAAYW,MAEbE,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MATW,2CAAH,qDAkBxB,OALAG,qBAAU,WAEHhB,MACJ,IAGD,qBAAKiB,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CAAcC,OAAQxB,EAAUyB,KAAM,GAAtC,UACA,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAGJzB,EAAS0B,KAAI,SAACC,GACZ,GAAoB,qBAATA,GAAwB,QAASA,EAAK,CAC/C,IAAIC,EAAMD,EAAI,IAAQE,MAAM,KAC5B,GAAID,EAAIE,QAAU,EAAE,CAClB,IAAIC,EAAMC,OAAOC,WAAWL,EAAIA,EAAIE,OAAO,IACvCI,EAAMF,OAAOC,WAAWL,EAAIA,EAAIE,OAAO,IAC3C,OACE,cAACrC,EAAA,EAAD,CAAQI,SAAU,CAACkC,EAAIG,GAAvB,SACE,eAACC,EAAA,EAAD,WACGR,EAAK,oCADR,IACoB,uBACjBI,EAFH,IAESG,EAFT,IAEc,uBAFd,iBAGOP,EAAK,gBAHZ,IAGmB,uBAHnB,6BAISA,EAAK,4BAJd,IAIuB,2BALSI,EAAI,IAAIG,GAU5C,OAAO,6BAGT,OAAO,sCCtDNE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b62dc0ea.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\"\nimport L, { LatLng } from \"leaflet\"\nimport \"leaflet/dist/leaflet.css\"\nimport axios, {AxiosResponse} from \"axios\"\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nfunction App() {\n  const url = \"https://opendata.yamanashi.dev/api/yama\"\n  const position = new LatLng(35.667160, 138.568993);\n\n  const [yamalist, setYamaList] = useState<Array<{[key: string]: string}>>([])\n\n  // 山梨県が含まれる山一覧を取得する\n  const getYamaFromBackend = async () => {\n    await axios.create({baseURL: url}).get(\"?keys=都道府県&values=山梨県\", \n    {\n      headers : { Accept: \"application/json\"}\n    }).then(function (response: AxiosResponse) {\n      let values : Array<{[key: string]: string}> = response.data.data\n      setYamaList(values)      \n    })\n    .catch(function (error: AxiosResponse) {\n      console.log(error)\n    })    \n  }\n\n  useEffect(() => {\n    // 山梨県が含まれる山一覧を取得する\n    void getYamaFromBackend()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <MapContainer center={position} zoom={13}>\n      <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {\n          yamalist.map((yama)=>{\n            if (typeof yama !== \"undefined\" && \"url\" in yama){\n              let pos = yama[\"url\"].split(\"/\")\n              if (pos.length >= 2){\n                let lat = Number.parseFloat(pos[pos.length-2])\n                let lng = Number.parseFloat(pos[pos.length-1])\n                return (\n                  <Marker position={[lat,lng]} key={lat+\",\"+lng}>\n                    <Popup>\n                      {yama[\"山名<山頂名>\"]} <br/>\n                      {lat},{lng} <br/>\n                      標高: {yama[\"標高\"]} <br/>\n                      都道府県: {yama[\"都道府県\"]} <br/>\n                    </Popup>\n                  </Marker>\n                )\n              }else{\n                return(<></>)\n              }\n            }else{\n              return(<></>)\n            }\n          })\n        }      \n      </MapContainer>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}